// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: auth.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CAClientClient is the client API for CAClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CAClientClient interface {
	Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthReply, error)
	RequestCert(ctx context.Context, in *CertRequest, opts ...grpc.CallOption) (*CertReply, error)
}

type cAClientClient struct {
	cc grpc.ClientConnInterface
}

func NewCAClientClient(cc grpc.ClientConnInterface) CAClientClient {
	return &cAClientClient{cc}
}

func (c *cAClientClient) Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthReply, error) {
	out := new(AuthReply)
	err := c.cc.Invoke(ctx, "/client.CAClient/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cAClientClient) RequestCert(ctx context.Context, in *CertRequest, opts ...grpc.CallOption) (*CertReply, error) {
	out := new(CertReply)
	err := c.cc.Invoke(ctx, "/client.CAClient/RequestCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CAClientServer is the server API for CAClient service.
// All implementations must embed UnimplementedCAClientServer
// for forward compatibility
type CAClientServer interface {
	Authenticate(context.Context, *AuthRequest) (*AuthReply, error)
	RequestCert(context.Context, *CertRequest) (*CertReply, error)
	mustEmbedUnimplementedCAClientServer()
}

// UnimplementedCAClientServer must be embedded to have forward compatible implementations.
type UnimplementedCAClientServer struct {
}

func (UnimplementedCAClientServer) Authenticate(context.Context, *AuthRequest) (*AuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedCAClientServer) RequestCert(context.Context, *CertRequest) (*CertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCert not implemented")
}
func (UnimplementedCAClientServer) mustEmbedUnimplementedCAClientServer() {}

// UnsafeCAClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CAClientServer will
// result in compilation errors.
type UnsafeCAClientServer interface {
	mustEmbedUnimplementedCAClientServer()
}

func RegisterCAClientServer(s grpc.ServiceRegistrar, srv CAClientServer) {
	s.RegisterService(&CAClient_ServiceDesc, srv)
}

func _CAClient_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CAClientServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.CAClient/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CAClientServer).Authenticate(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CAClient_RequestCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CAClientServer).RequestCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.CAClient/RequestCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CAClientServer).RequestCert(ctx, req.(*CertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CAClient_ServiceDesc is the grpc.ServiceDesc for CAClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CAClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "client.CAClient",
	HandlerType: (*CAClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _CAClient_Authenticate_Handler,
		},
		{
			MethodName: "RequestCert",
			Handler:    _CAClient_RequestCert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
