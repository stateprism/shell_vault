// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: adminproto/admin.proto

package adminproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	AdminAuthInit(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AdminAuthInitResponse, error)
	AdminAuthRespond(ctx context.Context, in *AdminAuthRequest, opts ...grpc.CallOption) (*AdminAuthResponse, error)
	StopServer(ctx context.Context, in *StopServerRequest, opts ...grpc.CallOption) (*Empty, error)
	ChangeRootCert(ctx context.Context, in *ChangeRootCertRequest, opts ...grpc.CallOption) (*ChangeRootCertResponse, error)
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*UserActionResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) AdminAuthInit(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AdminAuthInitResponse, error) {
	out := new(AdminAuthInitResponse)
	err := c.cc.Invoke(ctx, "/AdminService/AdminAuthInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AdminAuthRespond(ctx context.Context, in *AdminAuthRequest, opts ...grpc.CallOption) (*AdminAuthResponse, error) {
	out := new(AdminAuthResponse)
	err := c.cc.Invoke(ctx, "/AdminService/AdminAuthRespond", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) StopServer(ctx context.Context, in *StopServerRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/AdminService/StopServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ChangeRootCert(ctx context.Context, in *ChangeRootCertRequest, opts ...grpc.CallOption) (*ChangeRootCertResponse, error) {
	out := new(ChangeRootCertResponse)
	err := c.cc.Invoke(ctx, "/AdminService/ChangeRootCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*UserActionResponse, error) {
	out := new(UserActionResponse)
	err := c.cc.Invoke(ctx, "/AdminService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	AdminAuthInit(context.Context, *Empty) (*AdminAuthInitResponse, error)
	AdminAuthRespond(context.Context, *AdminAuthRequest) (*AdminAuthResponse, error)
	StopServer(context.Context, *StopServerRequest) (*Empty, error)
	ChangeRootCert(context.Context, *ChangeRootCertRequest) (*ChangeRootCertResponse, error)
	AddUser(context.Context, *AddUserRequest) (*UserActionResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) AdminAuthInit(context.Context, *Empty) (*AdminAuthInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAuthInit not implemented")
}
func (UnimplementedAdminServiceServer) AdminAuthRespond(context.Context, *AdminAuthRequest) (*AdminAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAuthRespond not implemented")
}
func (UnimplementedAdminServiceServer) StopServer(context.Context, *StopServerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopServer not implemented")
}
func (UnimplementedAdminServiceServer) ChangeRootCert(context.Context, *ChangeRootCertRequest) (*ChangeRootCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeRootCert not implemented")
}
func (UnimplementedAdminServiceServer) AddUser(context.Context, *AddUserRequest) (*UserActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_AdminAuthInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AdminAuthInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdminService/AdminAuthInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AdminAuthInit(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AdminAuthRespond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AdminAuthRespond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdminService/AdminAuthRespond",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AdminAuthRespond(ctx, req.(*AdminAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_StopServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).StopServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdminService/StopServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).StopServer(ctx, req.(*StopServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ChangeRootCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRootCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ChangeRootCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdminService/ChangeRootCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ChangeRootCert(ctx, req.(*ChangeRootCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdminService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminAuthInit",
			Handler:    _AdminService_AdminAuthInit_Handler,
		},
		{
			MethodName: "AdminAuthRespond",
			Handler:    _AdminService_AdminAuthRespond_Handler,
		},
		{
			MethodName: "StopServer",
			Handler:    _AdminService_StopServer_Handler,
		},
		{
			MethodName: "ChangeRootCert",
			Handler:    _AdminService_ChangeRootCert_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _AdminService_AddUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adminproto/admin.proto",
}
