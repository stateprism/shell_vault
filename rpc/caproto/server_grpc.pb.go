// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: caproto/server.proto

package caproto

import (
	context "context"
	common "github.com/stateprism/shell_vault/rpc/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CertificateAuthorityClient is the client API for CertificateAuthority service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CertificateAuthorityClient interface {
	GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigReply, error)
	Authenticate(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.AuthReply, error)
	RequestUserCertificate(ctx context.Context, in *UserCertRequest, opts ...grpc.CallOption) (*CertReply, error)
	RequestServerCertificate(ctx context.Context, in *HostCertRequest, opts ...grpc.CallOption) (*CertReply, error)
	GetCurrentKey(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*CertReply, error)
}

type certificateAuthorityClient struct {
	cc grpc.ClientConnInterface
}

func NewCertificateAuthorityClient(cc grpc.ClientConnInterface) CertificateAuthorityClient {
	return &certificateAuthorityClient{cc}
}

func (c *certificateAuthorityClient) GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigReply, error) {
	out := new(ConfigReply)
	err := c.cc.Invoke(ctx, "/CertificateAuthority/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityClient) Authenticate(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.AuthReply, error) {
	out := new(common.AuthReply)
	err := c.cc.Invoke(ctx, "/CertificateAuthority/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityClient) RequestUserCertificate(ctx context.Context, in *UserCertRequest, opts ...grpc.CallOption) (*CertReply, error) {
	out := new(CertReply)
	err := c.cc.Invoke(ctx, "/CertificateAuthority/RequestUserCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityClient) RequestServerCertificate(ctx context.Context, in *HostCertRequest, opts ...grpc.CallOption) (*CertReply, error) {
	out := new(CertReply)
	err := c.cc.Invoke(ctx, "/CertificateAuthority/RequestServerCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityClient) GetCurrentKey(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*CertReply, error) {
	out := new(CertReply)
	err := c.cc.Invoke(ctx, "/CertificateAuthority/GetCurrentKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertificateAuthorityServer is the server API for CertificateAuthority service.
// All implementations must embed UnimplementedCertificateAuthorityServer
// for forward compatibility
type CertificateAuthorityServer interface {
	GetConfig(context.Context, *ConfigRequest) (*ConfigReply, error)
	Authenticate(context.Context, *common.Empty) (*common.AuthReply, error)
	RequestUserCertificate(context.Context, *UserCertRequest) (*CertReply, error)
	RequestServerCertificate(context.Context, *HostCertRequest) (*CertReply, error)
	GetCurrentKey(context.Context, *common.Empty) (*CertReply, error)
	mustEmbedUnimplementedCertificateAuthorityServer()
}

// UnimplementedCertificateAuthorityServer must be embedded to have forward compatible implementations.
type UnimplementedCertificateAuthorityServer struct {
}

func (UnimplementedCertificateAuthorityServer) GetConfig(context.Context, *ConfigRequest) (*ConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedCertificateAuthorityServer) Authenticate(context.Context, *common.Empty) (*common.AuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedCertificateAuthorityServer) RequestUserCertificate(context.Context, *UserCertRequest) (*CertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestUserCertificate not implemented")
}
func (UnimplementedCertificateAuthorityServer) RequestServerCertificate(context.Context, *HostCertRequest) (*CertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestServerCertificate not implemented")
}
func (UnimplementedCertificateAuthorityServer) GetCurrentKey(context.Context, *common.Empty) (*CertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentKey not implemented")
}
func (UnimplementedCertificateAuthorityServer) mustEmbedUnimplementedCertificateAuthorityServer() {}

// UnsafeCertificateAuthorityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CertificateAuthorityServer will
// result in compilation errors.
type UnsafeCertificateAuthorityServer interface {
	mustEmbedUnimplementedCertificateAuthorityServer()
}

func RegisterCertificateAuthorityServer(s grpc.ServiceRegistrar, srv CertificateAuthorityServer) {
	s.RegisterService(&CertificateAuthority_ServiceDesc, srv)
}

func _CertificateAuthority_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CertificateAuthority/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServer).GetConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthority_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CertificateAuthority/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServer).Authenticate(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthority_RequestUserCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServer).RequestUserCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CertificateAuthority/RequestUserCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServer).RequestUserCertificate(ctx, req.(*UserCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthority_RequestServerCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServer).RequestServerCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CertificateAuthority/RequestServerCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServer).RequestServerCertificate(ctx, req.(*HostCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthority_GetCurrentKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServer).GetCurrentKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CertificateAuthority/GetCurrentKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServer).GetCurrentKey(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CertificateAuthority_ServiceDesc is the grpc.ServiceDesc for CertificateAuthority service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CertificateAuthority_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CertificateAuthority",
	HandlerType: (*CertificateAuthorityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _CertificateAuthority_GetConfig_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _CertificateAuthority_Authenticate_Handler,
		},
		{
			MethodName: "RequestUserCertificate",
			Handler:    _CertificateAuthority_RequestUserCertificate_Handler,
		},
		{
			MethodName: "RequestServerCertificate",
			Handler:    _CertificateAuthority_RequestServerCertificate_Handler,
		},
		{
			MethodName: "GetCurrentKey",
			Handler:    _CertificateAuthority_GetCurrentKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "caproto/server.proto",
}
