// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: caproto/server.proto

package caproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrismaCaClient is the client API for PrismaCa service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrismaCaClient interface {
	GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigReply, error)
	Authenticate(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*AuthReply, error)
	RequestCert(ctx context.Context, in *CertRequest, opts ...grpc.CallOption) (*CertReply, error)
	GetCurrentKey(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*CertReply, error)
}

type prismaCaClient struct {
	cc grpc.ClientConnInterface
}

func NewPrismaCaClient(cc grpc.ClientConnInterface) PrismaCaClient {
	return &prismaCaClient{cc}
}

func (c *prismaCaClient) GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigReply, error) {
	out := new(ConfigReply)
	err := c.cc.Invoke(ctx, "/PrismaCa/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismaCaClient) Authenticate(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*AuthReply, error) {
	out := new(AuthReply)
	err := c.cc.Invoke(ctx, "/PrismaCa/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismaCaClient) RequestCert(ctx context.Context, in *CertRequest, opts ...grpc.CallOption) (*CertReply, error) {
	out := new(CertReply)
	err := c.cc.Invoke(ctx, "/PrismaCa/RequestCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismaCaClient) GetCurrentKey(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*CertReply, error) {
	out := new(CertReply)
	err := c.cc.Invoke(ctx, "/PrismaCa/GetCurrentKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrismaCaServer is the server API for PrismaCa service.
// All implementations must embed UnimplementedPrismaCaServer
// for forward compatibility
type PrismaCaServer interface {
	GetConfig(context.Context, *ConfigRequest) (*ConfigReply, error)
	Authenticate(context.Context, *EmptyMsg) (*AuthReply, error)
	RequestCert(context.Context, *CertRequest) (*CertReply, error)
	GetCurrentKey(context.Context, *EmptyMsg) (*CertReply, error)
	mustEmbedUnimplementedPrismaCaServer()
}

// UnimplementedPrismaCaServer must be embedded to have forward compatible implementations.
type UnimplementedPrismaCaServer struct {
}

func (UnimplementedPrismaCaServer) GetConfig(context.Context, *ConfigRequest) (*ConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedPrismaCaServer) Authenticate(context.Context, *EmptyMsg) (*AuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedPrismaCaServer) RequestCert(context.Context, *CertRequest) (*CertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCert not implemented")
}
func (UnimplementedPrismaCaServer) GetCurrentKey(context.Context, *EmptyMsg) (*CertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentKey not implemented")
}
func (UnimplementedPrismaCaServer) mustEmbedUnimplementedPrismaCaServer() {}

// UnsafePrismaCaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrismaCaServer will
// result in compilation errors.
type UnsafePrismaCaServer interface {
	mustEmbedUnimplementedPrismaCaServer()
}

func RegisterPrismaCaServer(s grpc.ServiceRegistrar, srv PrismaCaServer) {
	s.RegisterService(&PrismaCa_ServiceDesc, srv)
}

func _PrismaCa_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismaCaServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PrismaCa/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismaCaServer).GetConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrismaCa_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismaCaServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PrismaCa/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismaCaServer).Authenticate(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrismaCa_RequestCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismaCaServer).RequestCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PrismaCa/RequestCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismaCaServer).RequestCert(ctx, req.(*CertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrismaCa_GetCurrentKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismaCaServer).GetCurrentKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PrismaCa/GetCurrentKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismaCaServer).GetCurrentKey(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// PrismaCa_ServiceDesc is the grpc.ServiceDesc for PrismaCa service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrismaCa_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PrismaCa",
	HandlerType: (*PrismaCaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _PrismaCa_GetConfig_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _PrismaCa_Authenticate_Handler,
		},
		{
			MethodName: "RequestCert",
			Handler:    _PrismaCa_RequestCert_Handler,
		},
		{
			MethodName: "GetCurrentKey",
			Handler:    _PrismaCa_GetCurrentKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "caproto/server.proto",
}
